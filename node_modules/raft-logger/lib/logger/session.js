var events = require('events');
var util = require('util');
var ringBuffers = require('./ringbuffers');
var RingBuffer = require('./ringbuffer');
var LogStream = require('./log-stream')

var CompositeRingBuffer = module.exports = function(config) {
	events.EventEmitter.call(this);
	this.rbs = [];

	this.logStreams = {}
};
//
// Inherit from `events.EventEmitter`.
//
util.inherits(CompositeRingBuffer, events.EventEmitter);
var formatItem = function(item) {
	var tsDate = new Date();
	tsDate.setTime(item.ts);
	var str = tsDate.toISOString() + ': ' + item.msg + '\n';
	return str;
};
CompositeRingBuffer.prototype.add = function(tokens) {
	var self = this;
	tokens.forEach(function(token) {
		if (!ringBuffers[token.id]) {
			ringBuffers[token.id] = new RingBuffer(500);
		}

		var rb = ringBuffers[token.id];

		rb.addChannel(token.channel);
		rb.addSource(token.source);
		console.log(token.channel, token.source)
		if (!self.logStreams[token.channel]) {
			var logStream = self.logStreams[token.channel] = new LogStream(token.channel)

			logStream.run()
		}

		self.logStreams[token.channel].announce(token.source)
		rb.on('added', function(item) {
			self.emit('added', item);
			self.logStreams[token.channel]._sendLog(token.source, formatItem(item))
		});
		self.rbs.push(rb);
	});
};

CompositeRingBuffer.prototype.getAll = function(tokens) {
	var output = [];

	this.rbs.forEach(function(rb) {
		rb.getAll().forEach(function(item) {
			output.push(item)
		});
	});

	return output.sort(function(entry1, entry2) {
		return entry1.ts > entry2.ts ? 1 : -1;
	});
};
